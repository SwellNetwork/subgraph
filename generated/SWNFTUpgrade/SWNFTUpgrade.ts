// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogAddStrategy extends ethereum.Event {
  get params(): LogAddStrategy__Params {
    return new LogAddStrategy__Params(this);
  }
}

export class LogAddStrategy__Params {
  _event: LogAddStrategy;

  constructor(event: LogAddStrategy) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogAddSuperWhiteList extends ethereum.Event {
  get params(): LogAddSuperWhiteList__Params {
    return new LogAddSuperWhiteList__Params(this);
  }
}

export class LogAddSuperWhiteList__Params {
  _event: LogAddSuperWhiteList;

  constructor(event: LogAddSuperWhiteList) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pubKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class LogAddWhiteList extends ethereum.Event {
  get params(): LogAddWhiteList__Params {
    return new LogAddWhiteList__Params(this);
  }
}

export class LogAddWhiteList__Params {
  _event: LogAddWhiteList;

  constructor(event: LogAddWhiteList) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pubKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class LogDeposit extends ethereum.Event {
  get params(): LogDeposit__Params {
    return new LogDeposit__Params(this);
  }
}

export class LogDeposit__Params {
  _event: LogDeposit;

  constructor(event: LogDeposit) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogEnterStrategy extends ethereum.Event {
  get params(): LogEnterStrategy__Params {
    return new LogEnterStrategy__Params(this);
  }
}

export class LogEnterStrategy__Params {
  _event: LogEnterStrategy;

  constructor(event: LogEnterStrategy) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogExitStrategy extends ethereum.Event {
  get params(): LogExitStrategy__Params {
    return new LogExitStrategy__Params(this);
  }
}

export class LogExitStrategy__Params {
  _event: LogExitStrategy;

  constructor(event: LogExitStrategy) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogRemoveStrategy extends ethereum.Event {
  get params(): LogRemoveStrategy__Params {
    return new LogRemoveStrategy__Params(this);
  }
}

export class LogRemoveStrategy__Params {
  _event: LogRemoveStrategy;

  constructor(event: LogRemoveStrategy) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetFee extends ethereum.Event {
  get params(): LogSetFee__Params {
    return new LogSetFee__Params(this);
  }
}

export class LogSetFee__Params {
  _event: LogSetFee;

  constructor(event: LogSetFee) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogSetFeePool extends ethereum.Event {
  get params(): LogSetFeePool__Params {
    return new LogSetFeePool__Params(this);
  }
}

export class LogSetFeePool__Params {
  _event: LogSetFeePool;

  constructor(event: LogSetFeePool) {
    this._event = event;
  }

  get feePool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetRate extends ethereum.Event {
  get params(): LogSetRate__Params {
    return new LogSetRate__Params(this);
  }
}

export class LogSetRate__Params {
  _event: LogSetRate;

  constructor(event: LogSetRate) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pubKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get rate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogSetSWETHAddress extends ethereum.Event {
  get params(): LogSetSWETHAddress__Params {
    return new LogSetSWETHAddress__Params(this);
  }
}

export class LogSetSWETHAddress__Params {
  _event: LogSetSWETHAddress;

  constructor(event: LogSetSWETHAddress) {
    this._event = event;
  }

  get swETHAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogStake extends ethereum.Event {
  get params(): LogStake__Params {
    return new LogStake__Params(this);
  }
}

export class LogStake__Params {
  _event: LogStake;

  constructor(event: LogStake) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get itemId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get pubKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get deposit(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get referral(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class LogUpdateBotAddress extends ethereum.Event {
  get params(): LogUpdateBotAddress__Params {
    return new LogUpdateBotAddress__Params(this);
  }
}

export class LogUpdateBotAddress__Params {
  _event: LogUpdateBotAddress;

  constructor(event: LogUpdateBotAddress) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogUpdateIsValidatorActive extends ethereum.Event {
  get params(): LogUpdateIsValidatorActive__Params {
    return new LogUpdateIsValidatorActive__Params(this);
  }
}

export class LogUpdateIsValidatorActive__Params {
  _event: LogUpdateIsValidatorActive;

  constructor(event: LogUpdateIsValidatorActive) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pubKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get isActive(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class LogWithdraw extends ethereum.Event {
  get params(): LogWithdraw__Params {
    return new LogWithdraw__Params(this);
  }
}

export class LogWithdraw__Params {
  _event: LogWithdraw;

  constructor(event: LogWithdraw) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SWNFTUpgrade__positionsResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: Bytes,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getPubKey(): Bytes {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }

  getBaseTokenBalance(): BigInt {
    return this.value2;
  }

  getTimeStamp(): BigInt {
    return this.value3;
  }

  getOperator(): boolean {
    return this.value4;
  }
}

export class SWNFTUpgrade extends ethereum.SmartContract {
  static bind(address: Address): SWNFTUpgrade {
    return new SWNFTUpgrade("SWNFTUpgrade", address);
  }

  ETHER(): BigInt {
    let result = super.call("ETHER", "ETHER():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ETHER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ETHER", "ETHER():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GWEI(): BigInt {
    let result = super.call("GWEI", "GWEI():(uint256)", []);

    return result[0].toBigInt();
  }

  try_GWEI(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("GWEI", "GWEI():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addStrategy(strategy: Address): boolean {
    let result = super.call("addStrategy", "addStrategy(address):(bool)", [
      ethereum.Value.fromAddress(strategy)
    ]);

    return result[0].toBoolean();
  }

  try_addStrategy(strategy: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("addStrategy", "addStrategy(address):(bool)", [
      ethereum.Value.fromAddress(strategy)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allStrategies(): Array<Address> {
    let result = super.call("allStrategies", "allStrategies():(address[])", []);

    return result[0].toAddressArray();
  }

  try_allStrategies(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "allStrategies",
      "allStrategies():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  botAddress(): Address {
    let result = super.call("botAddress", "botAddress():(address)", []);

    return result[0].toAddress();
  }

  try_botAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("botAddress", "botAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposit(tokenId: BigInt, amount: BigInt): boolean {
    let result = super.call("deposit", "deposit(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_deposit(tokenId: BigInt, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("deposit", "deposit(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositContract(): Address {
    let result = super.call(
      "depositContract",
      "depositContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_depositContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "depositContract",
      "depositContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deprecatedStrategies(param0: BigInt): Address {
    let result = super.call(
      "deprecatedStrategies",
      "deprecatedStrategies(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_deprecatedStrategies(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deprecatedStrategies",
      "deprecatedStrategies(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  enterStrategy(tokenId: BigInt, strategy: Address, amount: BigInt): boolean {
    let result = super.call(
      "enterStrategy",
      "enterStrategy(uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_enterStrategy(
    tokenId: BigInt,
    strategy: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "enterStrategy",
      "enterStrategy(uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  exitStrategy(tokenId: BigInt, strategy: Address, amount: BigInt): boolean {
    let result = super.call(
      "exitStrategy",
      "exitStrategy(uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_exitStrategy(
    tokenId: BigInt,
    strategy: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "exitStrategy",
      "exitStrategy(uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feePool(): Address {
    let result = super.call("feePool", "feePool():(address)", []);

    return result[0].toAddress();
  }

  try_feePool(): ethereum.CallResult<Address> {
    let result = super.tryCall("feePool", "feePool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStrategyLength(): BigInt {
    let result = super.call(
      "getStrategyLength",
      "getStrategyLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStrategyLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStrategyLength",
      "getStrategyLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawalCredentials(): Bytes {
    let result = super.call(
      "getWithdrawalCredentials",
      "getWithdrawalCredentials():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_getWithdrawalCredentials(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getWithdrawalCredentials",
      "getWithdrawalCredentials():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidatorActive(param0: Bytes): boolean {
    let result = super.call(
      "isValidatorActive",
      "isValidatorActive(bytes):(bool)",
      [ethereum.Value.fromBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_isValidatorActive(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidatorActive",
      "isValidatorActive(bytes):(bool)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  opRate(param0: Bytes): BigInt {
    let result = super.call("opRate", "opRate(bytes):(uint256)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_opRate(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("opRate", "opRate(bytes):(uint256)", [
      ethereum.Value.fromBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  positions(param0: BigInt): SWNFTUpgrade__positionsResult {
    let result = super.call(
      "positions",
      "positions(uint256):(bytes,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SWNFTUpgrade__positionsResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_positions(
    param0: BigInt
  ): ethereum.CallResult<SWNFTUpgrade__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(uint256):(bytes,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SWNFTUpgrade__positionsResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  removeStrategy(strategy: Address): boolean {
    let result = super.call(
      "removeStrategy",
      "removeStrategy(address):(bool)",
      [ethereum.Value.fromAddress(strategy)]
    );

    return result[0].toBoolean();
  }

  try_removeStrategy(strategy: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeStrategy",
      "removeStrategy(address):(bool)",
      [ethereum.Value.fromAddress(strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  strategies(strategyIndex: BigInt): Address {
    let result = super.call("strategies", "strategies(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(strategyIndex)
    ]);

    return result[0].toAddress();
  }

  try_strategies(strategyIndex: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("strategies", "strategies(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(strategyIndex)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  superWhiteList(param0: Bytes): boolean {
    let result = super.call("superWhiteList", "superWhiteList(bytes):(bool)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_superWhiteList(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "superWhiteList",
      "superWhiteList(bytes):(bool)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swETHAddress(): Address {
    let result = super.call("swETHAddress", "swETHAddress():(address)", []);

    return result[0].toAddress();
  }

  try_swETHAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("swETHAddress", "swETHAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swETHSymbolOld(): string {
    let result = super.call("swETHSymbolOld", "swETHSymbolOld():(string)", []);

    return result[0].toString();
  }

  try_swETHSymbolOld(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "swETHSymbolOld",
      "swETHSymbolOld():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  swellAddress(): Address {
    let result = super.call("swellAddress", "swellAddress():(address)", []);

    return result[0].toAddress();
  }

  try_swellAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("swellAddress", "swellAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenIds(): BigInt {
    let result = super.call("tokenIds", "tokenIds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenIds", "tokenIds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tvl(): BigInt {
    let result = super.call("tvl", "tvl():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tvl(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tvl", "tvl():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorDeposits(param0: Bytes): BigInt {
    let result = super.call(
      "validatorDeposits",
      "validatorDeposits(bytes):(uint256)",
      [ethereum.Value.fromBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_validatorDeposits(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorDeposits",
      "validatorDeposits(bytes):(uint256)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validators(param0: BigInt): Bytes {
    let result = super.call("validators", "validators(uint256):(bytes)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_validators(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("validators", "validators(uint256):(bytes)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  validatorsLength(): BigInt {
    let result = super.call(
      "validatorsLength",
      "validatorsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_validatorsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorsLength",
      "validatorsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whiteList(param0: Bytes): boolean {
    let result = super.call("whiteList", "whiteList(bytes):(bool)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_whiteList(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("whiteList", "whiteList(bytes):(bool)", [
      ethereum.Value.fromBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(tokenId: BigInt, amount: BigInt): boolean {
    let result = super.call("withdraw", "withdraw(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_withdraw(tokenId: BigInt, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStrategyCall extends ethereum.Call {
  get inputs(): AddStrategyCall__Inputs {
    return new AddStrategyCall__Inputs(this);
  }

  get outputs(): AddStrategyCall__Outputs {
    return new AddStrategyCall__Outputs(this);
  }
}

export class AddStrategyCall__Inputs {
  _call: AddStrategyCall;

  constructor(call: AddStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddStrategyCall__Outputs {
  _call: AddStrategyCall;

  constructor(call: AddStrategyCall) {
    this._call = call;
  }

  get added(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddSuperWhiteListCall extends ethereum.Call {
  get inputs(): AddSuperWhiteListCall__Inputs {
    return new AddSuperWhiteListCall__Inputs(this);
  }

  get outputs(): AddSuperWhiteListCall__Outputs {
    return new AddSuperWhiteListCall__Outputs(this);
  }
}

export class AddSuperWhiteListCall__Inputs {
  _call: AddSuperWhiteListCall;

  constructor(call: AddSuperWhiteListCall) {
    this._call = call;
  }

  get pubKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class AddSuperWhiteListCall__Outputs {
  _call: AddSuperWhiteListCall;

  constructor(call: AddSuperWhiteListCall) {
    this._call = call;
  }
}

export class AddSuperWhiteListsCall extends ethereum.Call {
  get inputs(): AddSuperWhiteListsCall__Inputs {
    return new AddSuperWhiteListsCall__Inputs(this);
  }

  get outputs(): AddSuperWhiteListsCall__Outputs {
    return new AddSuperWhiteListsCall__Outputs(this);
  }
}

export class AddSuperWhiteListsCall__Inputs {
  _call: AddSuperWhiteListsCall;

  constructor(call: AddSuperWhiteListsCall) {
    this._call = call;
  }

  get pubKeys(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class AddSuperWhiteListsCall__Outputs {
  _call: AddSuperWhiteListsCall;

  constructor(call: AddSuperWhiteListsCall) {
    this._call = call;
  }
}

export class AddWhiteListCall extends ethereum.Call {
  get inputs(): AddWhiteListCall__Inputs {
    return new AddWhiteListCall__Inputs(this);
  }

  get outputs(): AddWhiteListCall__Outputs {
    return new AddWhiteListCall__Outputs(this);
  }
}

export class AddWhiteListCall__Inputs {
  _call: AddWhiteListCall;

  constructor(call: AddWhiteListCall) {
    this._call = call;
  }

  get pubKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class AddWhiteListCall__Outputs {
  _call: AddWhiteListCall;

  constructor(call: AddWhiteListCall) {
    this._call = call;
  }
}

export class AddWhiteListsCall extends ethereum.Call {
  get inputs(): AddWhiteListsCall__Inputs {
    return new AddWhiteListsCall__Inputs(this);
  }

  get outputs(): AddWhiteListsCall__Outputs {
    return new AddWhiteListsCall__Outputs(this);
  }
}

export class AddWhiteListsCall__Inputs {
  _call: AddWhiteListsCall;

  constructor(call: AddWhiteListsCall) {
    this._call = call;
  }

  get pubKeys(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class AddWhiteListsCall__Outputs {
  _call: AddWhiteListsCall;

  constructor(call: AddWhiteListsCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BatchActionCall extends ethereum.Call {
  get inputs(): BatchActionCall__Inputs {
    return new BatchActionCall__Inputs(this);
  }

  get outputs(): BatchActionCall__Outputs {
    return new BatchActionCall__Outputs(this);
  }
}

export class BatchActionCall__Inputs {
  _call: BatchActionCall;

  constructor(call: BatchActionCall) {
    this._call = call;
  }

  get actions(): Array<BatchActionCallActionsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      BatchActionCallActionsStruct
    >();
  }
}

export class BatchActionCall__Outputs {
  _call: BatchActionCall;

  constructor(call: BatchActionCall) {
    this._call = call;
  }
}

export class BatchActionCallActionsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get action(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get strategy(): Address {
    return this[3].toAddress();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EnterStrategyCall extends ethereum.Call {
  get inputs(): EnterStrategyCall__Inputs {
    return new EnterStrategyCall__Inputs(this);
  }

  get outputs(): EnterStrategyCall__Outputs {
    return new EnterStrategyCall__Outputs(this);
  }
}

export class EnterStrategyCall__Inputs {
  _call: EnterStrategyCall;

  constructor(call: EnterStrategyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get strategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EnterStrategyCall__Outputs {
  _call: EnterStrategyCall;

  constructor(call: EnterStrategyCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExitStrategyCall extends ethereum.Call {
  get inputs(): ExitStrategyCall__Inputs {
    return new ExitStrategyCall__Inputs(this);
  }

  get outputs(): ExitStrategyCall__Outputs {
    return new ExitStrategyCall__Outputs(this);
  }
}

export class ExitStrategyCall__Inputs {
  _call: ExitStrategyCall;

  constructor(call: ExitStrategyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get strategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExitStrategyCall__Outputs {
  _call: ExitStrategyCall;

  constructor(call: ExitStrategyCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _swellAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveStrategyCall extends ethereum.Call {
  get inputs(): RemoveStrategyCall__Inputs {
    return new RemoveStrategyCall__Inputs(this);
  }

  get outputs(): RemoveStrategyCall__Outputs {
    return new RemoveStrategyCall__Outputs(this);
  }
}

export class RemoveStrategyCall__Inputs {
  _call: RemoveStrategyCall;

  constructor(call: RemoveStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStrategyCall__Outputs {
  _call: RemoveStrategyCall;

  constructor(call: RemoveStrategyCall) {
    this._call = call;
  }

  get removed(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetFeePoolCall extends ethereum.Call {
  get inputs(): SetFeePoolCall__Inputs {
    return new SetFeePoolCall__Inputs(this);
  }

  get outputs(): SetFeePoolCall__Outputs {
    return new SetFeePoolCall__Outputs(this);
  }
}

export class SetFeePoolCall__Inputs {
  _call: SetFeePoolCall;

  constructor(call: SetFeePoolCall) {
    this._call = call;
  }

  get _feePool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeePoolCall__Outputs {
  _call: SetFeePoolCall;

  constructor(call: SetFeePoolCall) {
    this._call = call;
  }
}

export class SetRateCall extends ethereum.Call {
  get inputs(): SetRateCall__Inputs {
    return new SetRateCall__Inputs(this);
  }

  get outputs(): SetRateCall__Outputs {
    return new SetRateCall__Outputs(this);
  }
}

export class SetRateCall__Inputs {
  _call: SetRateCall;

  constructor(call: SetRateCall) {
    this._call = call;
  }

  get pubKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get rate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRateCall__Outputs {
  _call: SetRateCall;

  constructor(call: SetRateCall) {
    this._call = call;
  }
}

export class SetswETHAddressCall extends ethereum.Call {
  get inputs(): SetswETHAddressCall__Inputs {
    return new SetswETHAddressCall__Inputs(this);
  }

  get outputs(): SetswETHAddressCall__Outputs {
    return new SetswETHAddressCall__Outputs(this);
  }
}

export class SetswETHAddressCall__Inputs {
  _call: SetswETHAddressCall;

  constructor(call: SetswETHAddressCall) {
    this._call = call;
  }

  get _swETHAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetswETHAddressCall__Outputs {
  _call: SetswETHAddressCall;

  constructor(call: SetswETHAddressCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get stakes(): Array<StakeCallStakesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      StakeCallStakesStruct
    >();
  }

  get referral(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class StakeCallStakesStruct extends ethereum.Tuple {
  get pubKey(): Bytes {
    return this[0].toBytes();
  }

  get signature(): Bytes {
    return this[1].toBytes();
  }

  get depositDataRoot(): Bytes {
    return this[2].toBytes();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBotAddressCall extends ethereum.Call {
  get inputs(): UpdateBotAddressCall__Inputs {
    return new UpdateBotAddressCall__Inputs(this);
  }

  get outputs(): UpdateBotAddressCall__Outputs {
    return new UpdateBotAddressCall__Outputs(this);
  }
}

export class UpdateBotAddressCall__Inputs {
  _call: UpdateBotAddressCall;

  constructor(call: UpdateBotAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateBotAddressCall__Outputs {
  _call: UpdateBotAddressCall;

  constructor(call: UpdateBotAddressCall) {
    this._call = call;
  }
}

export class UpdateIsValidatorActiveCall extends ethereum.Call {
  get inputs(): UpdateIsValidatorActiveCall__Inputs {
    return new UpdateIsValidatorActiveCall__Inputs(this);
  }

  get outputs(): UpdateIsValidatorActiveCall__Outputs {
    return new UpdateIsValidatorActiveCall__Outputs(this);
  }
}

export class UpdateIsValidatorActiveCall__Inputs {
  _call: UpdateIsValidatorActiveCall;

  constructor(call: UpdateIsValidatorActiveCall) {
    this._call = call;
  }

  get pubKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class UpdateIsValidatorActiveCall__Outputs {
  _call: UpdateIsValidatorActiveCall;

  constructor(call: UpdateIsValidatorActiveCall) {
    this._call = call;
  }
}

export class UpdateIsValidatorActiveAndSetRateCall extends ethereum.Call {
  get inputs(): UpdateIsValidatorActiveAndSetRateCall__Inputs {
    return new UpdateIsValidatorActiveAndSetRateCall__Inputs(this);
  }

  get outputs(): UpdateIsValidatorActiveAndSetRateCall__Outputs {
    return new UpdateIsValidatorActiveAndSetRateCall__Outputs(this);
  }
}

export class UpdateIsValidatorActiveAndSetRateCall__Inputs {
  _call: UpdateIsValidatorActiveAndSetRateCall;

  constructor(call: UpdateIsValidatorActiveAndSetRateCall) {
    this._call = call;
  }

  get pubKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get rate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateIsValidatorActiveAndSetRateCall__Outputs {
  _call: UpdateIsValidatorActiveAndSetRateCall;

  constructor(call: UpdateIsValidatorActiveAndSetRateCall) {
    this._call = call;
  }
}

export class UpdateIsValidatorsActiveCall extends ethereum.Call {
  get inputs(): UpdateIsValidatorsActiveCall__Inputs {
    return new UpdateIsValidatorsActiveCall__Inputs(this);
  }

  get outputs(): UpdateIsValidatorsActiveCall__Outputs {
    return new UpdateIsValidatorsActiveCall__Outputs(this);
  }
}

export class UpdateIsValidatorsActiveCall__Inputs {
  _call: UpdateIsValidatorsActiveCall;

  constructor(call: UpdateIsValidatorsActiveCall) {
    this._call = call;
  }

  get pubKeys(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class UpdateIsValidatorsActiveCall__Outputs {
  _call: UpdateIsValidatorsActiveCall;

  constructor(call: UpdateIsValidatorsActiveCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
